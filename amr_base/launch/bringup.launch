<launch>
    <arg name="namespace"                 default="amr"/>
    <arg name="model_name"                default="amr"/>
    <arg name="planner_name"              default="thetas"/>
    <arg name="controller_name"           default="rs"/>
    <arg name="back_laser_frame_id"       default="back_laser_link"/>
    <arg name="front_laser_frame_id"      default="front_laser_link"/>
    <arg name="angle_start_front"         default="-1.745329252"/>
    <arg name="angle_end_front"           default="1.745329252"/>
    <arg name="angle_start_back"          default="-1.832595715"/>
    <arg name="angle_end_back"            default="1.832595715"/>
    <arg name="map_file"                  default="$(find amr_gazebo)/maps/map_tp2/edited/map.yaml"/>
    <arg name="virtual_wall_file"         default="$(find amr_gazebo)/maps/map_tp2/virtual_walls/map.yaml"/>
    <arg name="speed_filter_map_path"     default="$(find amr_gazebo)/maps/map_tp2/speed_filter/map.yaml"/>
    <arg name="disable_obstacle_map_path" default="$(find amr_gazebo)/maps/map_tp2/disable_obstacle/map.yaml"/>
    <arg name="safety_filter_map_path"    default="$(find amr_gazebo)/maps/map_tp2/safety_zone/map.yaml"/>
    <!-- <arg name="map_file"                  default="$(find amr_gazebo)/maps/map_tp3/edited/map.yaml"/>
    <arg name="virtual_wall_file"         default="$(find amr_gazebo)/maps/map_tp3/virtual_walls/map.yaml"/>
    <arg name="speed_filter_map_path"     default="$(find amr_gazebo)/maps/map_tp3/safety_filter/map.yaml"/>
    <arg name="disable_obstacle_map_path" default="$(find amr_gazebo)/maps/map_tp3/disable_obstacle/map.yaml"/> -->
    <arg name="open_rviz"                 default="false"/>

    <!-- Load URDF -->
    <param name="amr/robot_description" command="$(find xacro)/xacro --inorder $(find amr_description)/urdf/amr.urdf.xacro"/>

    <!-- This will create the amr_base hardware interface and instantiate a new controller manager with it -->
    <node name="amr_base" pkg="amr_base" type="amr_base" ns="$(arg namespace)" output="screen"/>

    <!-- Load ros_control controller configurations -->
    <rosparam file="$(find amr_base)/config/controller/joint_state_controller.yaml"    ns="$(arg namespace)" command="load" />
    <rosparam file="$(find amr_base)/config/controller/joint_position_controller.yaml" ns="$(arg namespace)" command="load" />
    <rosparam file="$(find amr_base)/config/controller/diffdrive_controller.yaml"      ns="$(arg namespace)" command="load" />
    <rosparam file="$(find amr_base)/config/base.yaml"                                 ns="$(arg namespace)" command="load" />

    <!-- Load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" 
          output="screen" ns="$(arg namespace)" args="joint_state_controller
                                                      joint_position_controller 
                                                      mobile_base_controller"/>

    <!-- EKF filter -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_node" clear_params="true" output="screen" ns="$(arg namespace)">
        <rosparam command="load" file="$(find amr_base)/config/ekf.yaml" subst_value="true" />
    </node>

    <!-- Add passive + mimic joints to joint_states topic -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ns="$(arg namespace)">
        <rosparam param="source_list">[joint_states]</rosparam>
        <param name="rate" value="200.0" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        output="screen" ns ="$(arg namespace)"/>

    <include file="$(find amr_base)/launch/sick_safetyscanners_front.launch">
        <arg name="frame_id"    value="$(arg front_laser_frame_id)" />
        <arg name="angle_start" value="$(arg angle_start_front)" />
        <arg name="angle_end"   value="$(arg angle_end_front)" />
    </include>

    <include file="$(find amr_base)/launch/sick_safetyscanners_back.launch">
        <arg name="frame_id"    value="$(arg back_laser_frame_id)" />
        <arg name="angle_start" value="$(arg angle_start_back)" />
        <arg name="angle_end"   value="$(arg angle_end_back)" />
    </include>

    <!-- Laser filter -->
    <node name="back_rep117_laser_filter" pkg="amr_driver" type="rep117_filter.py" output="screen">
        <remap from="scan" to="/amr/back_scan"/>
        <remap from="scan_filtered" to="back_scan_rep117"/>
    </node>

    <node name="front_rep117_laser_filter" pkg="amr_driver" type="rep117_filter.py" output="screen">
        <remap from="scan" to="/amr/front_scan"/>
        <remap from="scan_filtered" to="front_scan_rep117"/>
    </node>

    <!-- Launch IMU & IMU filter -->
    <include file="$(find amr_base)/launch/microstrain.launch">
        <arg name="params_file" value="$(find amr_base)/config/imu_params.yml" />
    </include>

    <include file="$(find imu_filter_madgwick)/launch/imu_filter_madgwick.launch"/>

    <!-- Launch camera -->
    <include file="$(find amr_base)/launch/rs_camera.launch"/>

    <!-- Launch navigation stack -->
    <include file="$(find amr_navigation)/launch/start_planner.launch">
        <arg name="open_rviz"                  value="$(arg open_rviz)"/>
        <arg name="planner_name"               value="$(arg planner_name)"/>
        <arg name="controller_name"            value="$(arg controller_name)"/>
        <arg name="map_file"                   value="$(arg map_file)"/>
        <arg name="virtual_wall_file"          value="$(arg virtual_wall_file)"/>
        <arg name="speed_filter_map_path"      value="$(arg speed_filter_map_path)" />
        <arg name="disable_obstacle_map_path"  value="$(arg disable_obstacle_map_path)" />
        <arg name="safety_filter_map_path"     value="$(arg safety_filter_map_path)" />
    </include>

    <!-- Launch FLEET CLIENT -->
    <!-- <include file="$(find amr_base)/launch/fleet_client.launch"/> -->

    <!--=== Launch all nodes ===-->
    <include file="$(find amr_base)/launch/other_nodes.launch"/>

    <!--===> LAUNCH depthImagetoLaserScan <===-->
    <!-- <include file="$(find amr_base)/launch/depthimage_to_laserscan.launch"/> -->

</launch>
